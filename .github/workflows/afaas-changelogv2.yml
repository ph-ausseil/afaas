name: 'AFAAS Changelog CI v2'

on:
  push:
    branches:
      - master
      - test-ci

jobs:

  check-milestones:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Install jq if not present
        run: |
          if ! command -v jq &> /dev/null
          then
              sudo apt-get update
              sudo apt-get install -y jq
          fi

      - name: Fetch and log closed milestones
        id: check_milestones
        
        run: |
          # Fetch the last checked time (this could be from a file or a secret)    
          if [ -f ".last_checked_time" ]; then
            LAST_CHECKED_TIME=$(cat .last_checked_time)
          else
            LAST_CHECKED_TIME="2000-01-01T00:00:00Z"  # Default old date
          fi

          # Use GitHub API to fetch milestones
          # Ensure to replace 'owner/repo' with your repository's owner and name
          MILESTONES=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                       "https://api.github.com/repos/ph-ausseil/afaas/milestones?state=closed")
      
          if [ $(echo "$MILESTONES" | jq '. | length') -eq 0 ]; then
            echo "No closed milestones found."
            MILESTONE_CLOSED="true"
          else
            # Process the milestones
            MILESTONE_CLOSED=$(echo "$MILESTONES" | jq --arg last_checked "$LAST_CHECKED_TIME" 'any(.closed_at > $last_checked)')
            echo "Milestone closed: $MILESTONE_CLOSED"
          fi
      
          #echo "milestone_closed=$MILESTONE_CLOSED" >> $GITHUB_STATE
          echo "::set-output name=milestone_closed::$MILESTONE_CLOSED"

      
          # Update the last checked time
          date -Iseconds > .last_checked_time
          git config --global user.name 'Pierre-Henri AUSSEIL'
          git config --global user.email 'ph.ausseil@gmail.com'
          git pull
          git add .last_checked_time
          git commit -m "Update last checked time" || echo "No changes to commit"
          
          git push origin ${{ github.ref }}

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    
    runs-on: ubuntu-latest
    needs: [check-milestones]
    steps:
        - uses: actions/checkout@v4
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: 3.11 # Specify your Python version here
        - name: Install Poetry
          run: |
           pip install poetry

        - name: Install Dependencies
          run: |
            poetry install

        - name: Run isort
          run: |
            poetry run isort --profile black .
           

        - name: Run autopep8
          run: |
            poetry run autopep8 --in-place --recursive .

        - name: Run black
          run: |
            poetry run black .
          
        - name: Run autoflake
          run: |
            poetry run autoflake --remove-all-unused-imports --remove-unused-variables --in-place --recursive .
            git config --global user.name 'autoflake-bot'
            git config --global user.email 'autoflake-bot@example.com'
            git add -A
            git commit -m "Apply autoflake fixes" || echo "No changes to commit"
            git pull
            git push origin ${{ github.ref }}

        - name: "Build Changelog"
          uses: mikepenz/release-changelog-builder-action@v4.1.0
          with:
            configurationJson: |
                {
                "template": "#{{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
                "pr_template": "[#{{NUMBER}}](#{{URL}}) - #{{TITLE}} - [@#{{AUTHOR}}](https://github.com/#{{AUTHOR}})
                ) , #{{LABELS}} \n",
                "categories": [
                    {
                        "title": "## ðŸ’¬ Other",
                        "labels": ["other"]
                    },
                    {
                        "title": "## ðŸ“¦ Dependencies",
                        "labels": ["dependencies"]
                    }
                ],
                "custom_placeholders": [
                  {
                    "name": "SMILEY",
                    "source": "LABELS",
                    "transformer": {
                      "pattern": "[\\S\\s]*?(https:\\/\\/corp\\.atlassian\\.net\\/browse\\/LABELS-.{2,4})[\\S\\s]*",
                      "target": "- $1"
                    }
                  }
                ]
                }

        - name: Commit formatting changes
          run: |
                  git config --global user.name 'Pierre-Henri AUSSEIL'
                  git config --global user.email 'ph.ausseil@gmail.com'
                  git add -A
                  git commit -m "Apply code formatting" || echo "No changes to commit"
                  git pull
                  git push origin ${{ github.ref }}
                
                
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}